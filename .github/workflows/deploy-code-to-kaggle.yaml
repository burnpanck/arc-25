name: Deploy Code to Kaggle

on:
  push:
    tags: ["v*"]     # e.g. v0.3.2
  workflow_dispatch:
    inputs:
      accelerator:
        description: "Target Kaggle accelerator"
        type: choice
        options:
          - gpu
          - tpu
          - all
        default: "all"
        required: true

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - id: mk
        run: |
          GPU='{"accelerator":"gpu","python-version":"3.11","pdm-groups":"-G vision -G train -G cuda12"}'
          TPU='{"accelerator":"tpu","python-version":"3.12","pdm-groups":"-G vision -G train -G tpu"}'

          case "${{ inputs.accelerator }}" in
            gpu)
              echo "matrix=[${GPU}]" >> "$GITHUB_OUTPUT"
              ;;
            tpu)
              echo "matrix=[${TPU}]" >> "$GITHUB_OUTPUT"
              ;;
            all|*)
              echo "matrix=[${GPU},${TPU}]" >> "$GITHUB_OUTPUT"
              ;;
          esac


  build-wheels:
    needs: prepare-matrix
    name: Build wheels for ${{ matrix.accelerator }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up PDM + Python ${{ matrix.python-version }}
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: true

      - name: Install pdm-wheel plugin
        run: pdm self add pdm-wheel

      - name: Build dependency wheels for ${{ matrix.accelerator }}
        run: |
          mkdir -p wheelhouse
          # Production deps + specified groups
          pdm wheel -w wheelhouse --prod -v ${{ matrix.pdm-groups }}

      - name: Remove heavy libraries
        run: |
          rm wheelhouse/torch-* || true

      - name: List wheels built
        run: ls -alh wheelhouse/

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.accelerator }}
          path: wheelhouse/
          retention-days: 1

  upload-to-kaggle:
    name: Combine wheels and upload to Kaggle
    needs: build-wheels
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up PDM + Python
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.11"
          cache: true

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Combine wheels into single directory
        run: |
          mkdir -p wheelhouse
          # Copy wheels from all artifacts
          find artifacts -name "*.whl" -exec cp {} wheelhouse/ \;
          echo "Combined wheels:"
          ls -alh wheelhouse/

      - name: Build project wheel
        run: |
          pdm build
          cp dist/*.whl wheelhouse/
          rm -rf dist/

      - name: List final wheelhouse contents
        run: ls -alh wheelhouse/

      - name: Resolve project metadata
        run: |
          set -e
          python - <<'PY'
          import os, re, pathlib
          try:
              import tomllib  # py311+
          except ModuleNotFoundError:
              import tomli as tomllib      # py310 fallback
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
          # Prefer PEP 621 [project] name; fallback to tool.pdm if needed
          name = (data.get("project", {}) or data.get("tool", {}).get("pdm", {})).get("name")
          if not name:
              raise SystemExit("ERROR: project.name is required in pyproject.toml")
          slug = re.sub(r'[^a-z0-9]+','-', name.lower()).strip('-')
          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write(f"PKG_NAME={name}\n")
              f.write(f"PKG_SLUG={slug}\n")
          PY

      - name: Prepare dataset files
        env:
          TAG: ${{ github.ref_name }}   # e.g. v0.3.2
          KAGGLE_USERNAME: ${{ vars.KAGGLE_USERNAME }}
        run: |
          set -e
          echo "This dataset contains wheels for ${PKG_NAME} (${TAG})." > wheelhouse/README.txt

          if [ -z "${KAGGLE_DATASET_ID}" ]; then
            if [ -z "${KAGGLE_USERNAME}" ]; then
              echo "KAGGLE_USERNAME secret is required." >&2; exit 1
            fi
            export KAGGLE_DATASET_ID="${KAGGLE_USERNAME}/${PKG_SLUG}-wheelhouse"
          fi

          cat > wheelhouse/dataset-metadata.json <<JSON
          {
            "title": "${PKG_NAME} wheelhouse",
            "id": "${KAGGLE_DATASET_ID}",
            "isPrivate": true,
            "licenses": [{"name": "CC-BY-NC-SA-4.0"}],
            "subtitle": "Offline installable wheels for Kaggle submissions",
            "description": "Built from tag ${TAG}.\\n\\nInstall inside Kaggle with:\\n\\n!pip install --no-index --find-links=/kaggle/input/${KAGGLE_DATASET_ID} ${PKG_NAME}==${TAG#v}"
          }
          JSON

      - name: Install Kaggle CLI
        run: |
          python -m pip install --upgrade pip kaggle
          kaggle --version || python -m kaggle --version

      - name: Publish or update Kaggle Dataset
        env:
          KAGGLE_USERNAME: ${{ vars.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          set -e
          cd wheelhouse
          kaggle datasets version -p . -m "${GITHUB_REF_NAME}"
